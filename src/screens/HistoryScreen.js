// Â±•Ê≠¥ÁîªÈù¢ - ÈÅéÂéª„Å´ÁîüÊàê„Åó„ÅüÊäïÁ®ø„ÅÆÈñ≤Ë¶ß
import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  FlatList,
  Image,
  TouchableOpacity,
  StyleSheet,
  Alert,
  RefreshControl
} from 'react-native';
import { useFocusEffect } from '@react-navigation/native';
import { format } from 'date-fns';
import * as Clipboard from 'expo-clipboard';
import * as Sharing from 'expo-sharing';
import * as Haptics from 'expo-haptics';

import { getHistory, deleteHistoryItem, clearHistory } from '../services/storage';

const HistoryScreen = () => {
  const [history, setHistory] = useState([]);
  const [refreshing, setRefreshing] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);

  // ÁîªÈù¢„Åå„Éï„Ç©„Éº„Ç´„Çπ„Åï„Çå„Åü„Å®„Åç„Å´Â±•Ê≠¥„ÇíË™≠„ÅøËæº„ÇÄ
  useFocusEffect(
    useCallback(() => {
      loadHistory();
    }, [])
  );

  /**
   * Â±•Ê≠¥„ÇíË™≠„ÅøËæº„ÇÄ
   */
  const loadHistory = async () => {
    try {
      const data = await getHistory();
      setHistory(data);
    } catch (error) {
      console.error('Â±•Ê≠¥„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
      Alert.alert('„Ç®„É©„Éº', 'Â±•Ê≠¥„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  };

  /**
   * „É™„Éï„É¨„ÉÉ„Ç∑„É•Âá¶ÁêÜ
   */
  const onRefresh = async () => {
    setRefreshing(true);
    await loadHistory();
    setRefreshing(false);
  };

  /**
   * Â±•Ê≠¥„Ç¢„Ç§„ÉÜ„É†„Çí„Çø„ÉÉ„Éó
   */
  const handleItemPress = (item) => {
    setSelectedItem(item.id === selectedItem ? null : item.id);
  };

  /**
   * „Ç≠„É£„Éó„Ç∑„Éß„É≥„Çí„Ç≥„Éî„Éº
   */
  const copyCaption = async (caption) => {
    try {
      await Clipboard.setStringAsync(caption);
      await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      Alert.alert('„Ç≥„Éî„ÉºÂÆå‰∫Ü', 'ÊñáÁ´†„Çí„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åó„Åæ„Åó„Åü');
    } catch (error) {
      console.error('„Ç≥„Éî„Éº„Ç®„É©„Éº:', error);
      Alert.alert('„Ç®„É©„Éº', '„Ç≥„Éî„Éº„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  };

  /**
   * ÁîªÂÉè„Çí„Ç∑„Çß„Ç¢
   */
  const shareImage = async (imageUri) => {
    try {
      const isAvailable = await Sharing.isAvailableAsync();
      if (isAvailable) {
        await Sharing.shareAsync(imageUri, {
          mimeType: 'image/jpeg',
          dialogTitle: 'InstagramÊäïÁ®ø„Çí„Ç∑„Çß„Ç¢'
        });
        await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      } else {
        Alert.alert('„Ç®„É©„Éº', '„Ç∑„Çß„Ç¢Ê©üËÉΩ„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì');
      }
    } catch (error) {
      console.error('„Ç∑„Çß„Ç¢„Ç®„É©„Éº:', error);
      Alert.alert('„Ç®„É©„Éº', '„Ç∑„Çß„Ç¢„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  };

  /**
   * Â±•Ê≠¥„Ç¢„Ç§„ÉÜ„É†„ÇíÂâäÈô§
   */
  const deleteItem = async (id) => {
    Alert.alert(
      'ÂâäÈô§Á¢∫Ë™ç',
      '„Åì„ÅÆÂ±•Ê≠¥„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü',
      [
        { text: '„Ç≠„É£„É≥„Çª„É´', style: 'cancel' },
        {
          text: 'ÂâäÈô§',
          style: 'destructive',
          onPress: async () => {
            try {
              await deleteHistoryItem(id);
              await loadHistory();
              await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
            } catch (error) {
              console.error('ÂâäÈô§„Ç®„É©„Éº:', error);
              Alert.alert('„Ç®„É©„Éº', 'ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
          }
        }
      ]
    );
  };

  /**
   * „Åô„Åπ„Å¶„ÅÆÂ±•Ê≠¥„Çí„ÇØ„É™„Ç¢
   */
  const clearAllHistory = () => {
    Alert.alert(
      '„Åô„Åπ„Å¶ÂâäÈô§',
      '„Åô„Åπ„Å¶„ÅÆÂ±•Ê≠¥„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì„ÄÇ',
      [
        { text: '„Ç≠„É£„É≥„Çª„É´', style: 'cancel' },
        {
          text: '„Åô„Åπ„Å¶ÂâäÈô§',
          style: 'destructive',
          onPress: async () => {
            try {
              await clearHistory();
              await loadHistory();
              await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
            } catch (error) {
              console.error('„ÇØ„É™„Ç¢„Ç®„É©„Éº:', error);
              Alert.alert('„Ç®„É©„Éº', '„ÇØ„É™„Ç¢„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
          }
        }
      ]
    );
  };

  /**
   * Êó•ÊôÇ„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
   */
  const formatDate = (dateString) => {
    try {
      const date = new Date(dateString);
      return format(date, 'yyyy/MM/dd HH:mm');
    } catch (error) {
      return dateString;
    }
  };

  /**
   * Â±•Ê≠¥„Ç¢„Ç§„ÉÜ„É†„ÅÆ„É¨„É≥„ÉÄ„É™„É≥„Ç∞
   */
  const renderItem = ({ item }) => {
    const isExpanded = selectedItem === item.id;

    return (
      <TouchableOpacity
        style={styles.item}
        onPress={() => handleItemPress(item)}
        activeOpacity={0.7}
      >
        <View style={styles.itemHeader}>
          <Image source={{ uri: item.processedImage }} style={styles.thumbnail} />
          <View style={styles.itemInfo}>
            <Text style={styles.caption} numberOfLines={isExpanded ? undefined : 2}>
              {item.caption}
            </Text>
            <Text style={styles.date}>{formatDate(item.createdAt)}</Text>
          </View>
        </View>

        {/* Â±ïÈñãÊôÇ„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
        {isExpanded && (
          <View style={styles.itemActions}>
            <TouchableOpacity
              style={styles.actionButton}
              onPress={() => copyCaption(item.caption)}
              activeOpacity={0.7}
            >
              <Text style={styles.actionButtonText}>„Ç≥„Éî„Éº</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.actionButton}
              onPress={() => shareImage(item.processedImage)}
              activeOpacity={0.7}
            >
              <Text style={styles.actionButtonText}>„Ç∑„Çß„Ç¢</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.actionButton, styles.deleteButton]}
              onPress={() => deleteItem(item.id)}
              activeOpacity={0.7}
            >
              <Text style={[styles.actionButtonText, styles.deleteButtonText]}>ÂâäÈô§</Text>
            </TouchableOpacity>
          </View>
        )}
      </TouchableOpacity>
    );
  };

  /**
   * Á©∫„ÅÆ„É™„Çπ„ÉàË°®Á§∫
   */
  const renderEmpty = () => (
    <View style={styles.emptyContainer}>
      <Text style={styles.emptyIcon}>üìù</Text>
      <Text style={styles.emptyText}>„Åæ„Å†Â±•Ê≠¥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</Text>
      <Text style={styles.emptySubtext}>„Éõ„Éº„É†ÁîªÈù¢„ÅßÊäïÁ®ø„ÇíÁîüÊàê„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ</Text>
    </View>
  );

  return (
    <View style={styles.container}>
      {/* „Éò„ÉÉ„ÉÄ„Éº„ÅÆ„ÇØ„É™„Ç¢„Éú„Çø„É≥ */}
      {history.length > 0 && (
        <View style={styles.headerActions}>
          <TouchableOpacity
            style={styles.clearButton}
            onPress={clearAllHistory}
            activeOpacity={0.7}
          >
            <Text style={styles.clearButtonText}>„Åô„Åπ„Å¶ÂâäÈô§</Text>
          </TouchableOpacity>
        </View>
      )}

      {/* Â±•Ê≠¥„É™„Çπ„Éà */}
      <FlatList
        data={history}
        renderItem={renderItem}
        keyExtractor={item => item.id}
        contentContainerStyle={[
          styles.listContainer,
          history.length === 0 && styles.listContainerEmpty
        ]}
        ListEmptyComponent={renderEmpty}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            tintColor="#007AFF"
          />
        }
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f7'
  },
  headerActions: {
    padding: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e5ea',
    alignItems: 'flex-end'
  },
  clearButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: '#ff3b30',
    borderRadius: 8
  },
  clearButtonText: {
    color: '#fff',
    fontWeight: '600',
    fontSize: 14
  },
  listContainer: {
    padding: 12
  },
  listContainerEmpty: {
    flex: 1
  },
  item: {
    backgroundColor: '#fff',
    borderRadius: 12,
    marginBottom: 12,
    padding: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 3
  },
  itemHeader: {
    flexDirection: 'row'
  },
  thumbnail: {
    width: 80,
    height: 80,
    borderRadius: 8,
    backgroundColor: '#f9f9f9'
  },
  itemInfo: {
    flex: 1,
    marginLeft: 12,
    justifyContent: 'center'
  },
  caption: {
    fontSize: 14,
    color: '#1c1c1e',
    marginBottom: 6,
    lineHeight: 20
  },
  date: {
    fontSize: 12,
    color: '#8e8e93'
  },
  itemActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 12,
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#e5e5ea'
  },
  actionButton: {
    flex: 1,
    paddingVertical: 10,
    marginHorizontal: 4,
    backgroundColor: '#007AFF',
    borderRadius: 8,
    alignItems: 'center'
  },
  actionButtonText: {
    color: '#fff',
    fontWeight: '600',
    fontSize: 14
  },
  deleteButton: {
    backgroundColor: '#ff3b30'
  },
  deleteButtonText: {
    color: '#fff'
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 40
  },
  emptyIcon: {
    fontSize: 60,
    marginBottom: 16
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1c1c1e',
    marginBottom: 8
  },
  emptySubtext: {
    fontSize: 14,
    color: '#8e8e93',
    textAlign: 'center'
  }
});

export default HistoryScreen;
